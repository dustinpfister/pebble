Pebble todo list:


pebblebar:

    storage core:
    
        * stoarge_incoming : a plugin that is used when the user recives an item into there storage.
        * storage_outgoing : the users item is transported from there storage to someplace else.
        * storage_drop : the user drops an item from there storage.


    shops :
    
        * get shops to work with new pluginData userRec
    
    shop ownership:
       
            * start a public or private shop
            * public shops allow other users to invest in your shop, but they get a share in the profits for doing so
            * private shops allow for you to enjoy all the prfoit for yourself, but you need to do all the investing into the shop.
       
        shop weight:
       
            * what is now weight whould be pebbleInvest.
            * pebbleInvest should be an array that contains one or more invester objects
            * an invester object contains:
                * the username of the invester
                * the amount of pebble they have invested
                * the percentage of the shop that they own.
            * have a totalSales property that is an amount of total profit that was made by sales
            * have a property that holds the date that the shop was started (for computing decay)
            * have a property that holds lastPromoted date ( for countering decay )
            * weight should be inpacted by pebbleInvest, but it should also be inpacted by sales, and decay.
       
        shop accounts:
       
            * have a property that holds an pebble account
            * have pebble that is made by sales stored in the shops pebble account
            * have payments payed out to owners accounts from the shop account

   main responder.js:
   
   main setup.js:
   
       * responder.js plugin files should be restered in the coreFiles foreach in checkPluginConf
       * updater.js files should be registered in the coreFiles foreach in checkPluginConf.

   main updater.js:
   
       * main updater.js should run updater.js files for each plugin that has one.
       * Updater.js will need some kind of registery for all the update scripts that are to be called on an update loop.   
       * The updater registery should be called by the main
       * updater.js should be a process and not just something that is called from server.js
   
   
    plugins:
   
    * home core:
    
        * home_userinfo
        * home_getaccounts get user accounts info
   
    * user core:
   
        * user_safeinfo gets info that is public in nature.
        * user_openaccount to start a new account
        * user closeaccount to close an account.
        * user_give allows for a user to just give pebble to another account.
        * user_deadaccount checks how long it has been sense the last time there has been a request for an account, and
            flags the account as dead if enough time has passed.
   
   
    * reserve core:
   
        * reserve_grant plugin for grant requests
        * reserve_playtime plugin pays pebble to users based on how long they have played.
        * reserve_visiting plugin rewards players with pebble from the reserve acount for visiting often.
        * reserve_time plugin rewards players with pebble from the reserve account based on the amount of time played.
        * reserve_webwork rewards players by allowing webwork to be preformed (requires webwork plugin)
        * reserve_promote rewards players with pebble from the reserve for promoting pebble by providing a social media link.
       
        * reserve_sanity plugin that checks for pebble accounts sanity (total of all accounts equals === worldtotal ), 
            will also fix accounts in the event of false sanity, and loggs results.
        * reserve_collecttax will collect taxes based on the current tax system
        * reserve_taxvote will allow for users to vote for what tax system they want.
       
    * shops core:
   
        * shops_trashshop called to trash a shop that is not wanted anymore
        
pebble_procesor:

   * make a seperate process from the main server.js file called pebble_processor.js
   * The process should process TransactionRequests.
   * every now and then the process should stop processing TransactionRequests to preform other tasks on the current state of accounts.
   * In addition to processing transactions pebble process should also preform a sanity check every now and then, and logg the outcome 
   of that check to the reserve object.
   * In the event of a failed sanity check, pebble_process should take autocorrection action, when it happens this also should be logged to the reserve account.

pebble.js:

    * have a collection called TransactionRequest, all transactions should start out as this, then be processed.
    * once you have the TransactionRequest collection make a seperate process that actually preforms the transactions (call it pebble_processor)

users.js:

    * allot of stuff in the userRec should be optional stuff that will be in pluginData.
    

pebble_check.js:

    * I am only checking prime user accounts, I should be checking ALL accounts.
    
pebble_fix.js:

    * I am only checking prime user accounts when preforming a check, I should be checking ALL accounts.
    
    
    
user membership levels (we need to have a game first, if you get started with this just do the token system) :
    
        * Membership levels start at level 0 upwards
        * The player must pay in terms of pebble or real money to upgrade membership level
        * Membership levels are subject to decay (player must continue to pay in terms of pebble and or real money)
        
        * real money payments:
            * Dirrectly unlock a membership level
            * Are charged on a monthy billing cycle.
            * plans start at just 0.99$ a month.
            * real money plans rase membership level base from level 0 (free account)
            
        * pebble payments:
            * the player can spend pebble towrds one or more "membership tokens"
            * the player can then spend these membership tokens to unlock higher levels.
            * the cost of membership levels in terms of tokens grows ( lv 1 = 1 token, lv 2 = 2 tokens, lv 3 = 4 tokens, ect.)
            * membership tokens can be horded, allowing for free (but tempery) access to higher membership levels.
        
        * membership tokens:
            * a token does not have to be bought outright, as they cost allot of pebble.
            * a player may spend as much or as little pebble as they like twords there next token.
            * once enough pebble has been spent they will recive a token.
            * no set limit on tokens.
            * tokens are transferable between accounts (you can gift tokens).
        
        * decay:
        
            * membership levels decay at the rate of one per month.
            * decay stops at level 0, or highest payed member base.  
    
DONE:
********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 

1.0.270 pluginData property added to userRec.
1.0.270 storage.js : a file in storage core that is added to scope, it will provide an api for other plugins that use storage.
1.0.270 storage core plugin

users.js:  (1.0.250) added a pluginData property.
pebblevar: (1.0.238) reserve path moved from server.js to path.js in reserve core plugin
pebblebar: (10.0237) path.js plugin files are now added in the coreFiles foreach in checkPluginConf, and not the plugins setup.js
pebblebar: (1.0.236) user_checkin sets a property in userRec that is the last time the user has sent a request.
pebblebar: (1.0.225) addToScope property now working in main setup.js
pebblebar: (1.0.224) A core plugin now has have an addToScope property in it's conf.json file.
pebblebar: (1.0.223) if a plugin has a setup.js file it is called if it it listed in it's conf.json file.
pebblebar: (1.0.222) conf.json files are used to run setup.js files for any plugin that has one.
pebblebar: (1.0.219) main setup.js checks conf.json files for config info
pebblebar: (1.0.205) fix the problem with require('./shops') in all the new shops plugins
pebblebar: (1.0.205) get new shops plugins working in place of the older shops plugin that used the single clientData object
pebblebar: (1.0.194) have a "scope" variable that will contain references to any *.js files that are needed by plugins.
pebblebar: (1.0.186) broke down the shops plugin into many small plugins that work with the new clientData Array.
pebblebar: (1.0.180) reserve_info, and reserve_take plugins are not working with clientData Array
pebblebar: (1.0.179) the clientData object will now be an array of objects
pebble.js: (1.0.173) fix a bug where a player can create pebble by transfering pebble to the same account.
pebblevar: (1.0.173) everything that has to do with shops should be pulled into the pebblebar folder
pebblebar: (1.0.173) the backends folder should be called "plugins", the lable backends is to general
pebblebar: (1.0.168) all code for our "plugins" should be in this folder.
pebble.js: (1.0.154) allow for the option to give pebble to a usernames prime account